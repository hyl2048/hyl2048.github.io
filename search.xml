<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式</title>
      <link href="/41682.html"/>
      <url>/41682.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>On Java 8</title>
      <link href="/29494.html"/>
      <url>/29494.html</url>
      
        <content type="html"><![CDATA[<h2 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h2><p>​        把万物看作对象，对象之间在传递信息。</p><p>​        对象的创建，对象的存储（数量、类型），对象之间的关系处理（对象间传递信息），对象的销毁，异常处理</p><h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>​        Java 为单继承语言，有别于多继承的C++</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>​        多样式与向上转型</p><p>​        多态和构造器</p><p>​        <strong>多态的好处</strong>在于解耦</p><h2 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h2><p>​        组合和继承</p><p>​        构造器加载顺序（对比销毁顺序）</p><h2 id="接口与抽象类"><a href="#接口与抽象类" class="headerlink" title="接口与抽象类"></a>接口与抽象类</h2><p>​        接口为抽象类</p><p>​        接口被用来建立类之间的协议</p><p>​        接口中的守卫方法或虚拟扩展方法（default）</p><p>​        类可以实现多个接口，但是抽象类只能继承单一抽象类</p><p>​        面向接口编程，将接口与实现解耦可以应用于多种不同的实现</p><p>​        选择问题：</p><p>​                尽可能地抽象，更倾向使用接口而非抽象类</p><p>​        接口和策略模式</p><p>​        接口和工厂模式</p><p>​        优先使用类而不是接口，若有必要使用接口，再对代码重构也不迟。如果只是单纯为了设计接口而设计接口，只会徒增复杂性。</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>​        内部自动类拥有对外部类所有成员的访问权，外部类与内部类产生的引用</p><p>​        匿名内部类，与正规的继承相比有些受限，因为匿名内部类既可以扩展类，也可以实现接口，但是不能两者兼备，而如果是实现接口，也只能实现一个接口。</p><p>​        嵌套类</p><p>​        <strong>内部类有效地实现了多重继承</strong>，每个内部类都能独立地继承自一个（接口的）实现，所以无论外部类是否已经继承了某个（接口的）实习，对于内部类都没有影响</p><p>​        内部类的其他特性：</p><p>​                内部类可以有多个实例</p><p>​                再单个外部类中，可以让多个内部类以不同的方        式实现</p><p>​                创建内部类对象的时刻并不依赖于外部类对象的        创建</p><p>​                内部类并没有令人迷惑的“is-a”关系，它就是一个独立的实体    </p><p>​        内部类提供的闭包功能，相比指针更灵活更安全</p><p>​        回调的价值在于它的灵活性-可以再运行时动态地决定需要调用什么方法</p><p>​        在控制框架使用内部类的价值</p><p>​        局部内部类和匿名内部类</p><p>设计模式总是将变化的事物与保持不变的事物分离开，在这个模式中，模板方法是保持不变的事物，而可覆盖的方法就是变化的事物</p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>​        <strong>持有对象</strong>的思想</p><p>​        泛型与类型安全的集合</p><p>​        散列码和hashCode()</p><p>​        List可以在创建后添加或删除元素，并自行调整大小</p><p>​        collection</p><p>​        迭代器，能够将遍历序列的操作与该序列的底层结构分离</p><p>​        for-in 和迭代器</p><p>​        集合和迭代器</p><p>​        <img src="F:%5CBlog%5Csource_posts%5COn-Java-8%5Ccollection.png" alt="collection"></p><p>​                                                                </p><p>​                上图中用粗黑的框包裹的类为常用的类</p><p><img src="F:%5CBlog%5Csource_posts%5COn-Java-8%5Ccollection1.png" alt="collection1"></p><p><img src="F:%5CBlog%5Csource_posts%5COn-Java-8%5Cmap.png" alt="map"></p><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><p>​            lambda表达式</p><p>​            方法引用</p><p>​            函数式接口：</p><p>​                    在使用函数式接口时，名称无关紧要，只要参数类型和返回类型相同</p><p>​            高阶函数</p><p>​            闭包，利用闭包可以轻松生成函数。支持闭包也叫变量捕获。只要有内部类就会有闭包</p><p>​                    等同final效果</p><p>​            函数组合，多个还能输组合成新函数    </p><p>​            柯里化和部分求值</p><p>​                        柯里化，将一个多参数函数转换为一系列单参数函数</p><p>​            纯函数式编程，Scala，Clojure</p><h2 id="流式编程"><a href="#流式编程" class="headerlink" title="流式编程"></a>流式编程</h2><p>​            集合优化了对象的存储，而流和对象有关。流是一系列与特定存储机制无关的元素。利用流，可以不迭代集合中的元素，就可以提取和操作数据。<strong>流的好处是，它使得程序更加短小和容易理解</strong>。</p><p>​            Lambda表达式和方法引用结合流式编程会更加简便、简洁。</p><p>​            流式编程是一种声明式编程，声明要做什么，而非怎么做的编程风格。</p><p>​            流式编程采用内部迭代。</p><p>​            流是懒加载的。</p><p>​            流操作，创建流，修该流元素，消费流元素</p><p>​            创建流：</p><p>​                    stream.of(); stream(); 集合通过stream()方法来产生一个流。</p><p>​            中级流操作</p><p>​            optional类</p><p>​            终端操作</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>​            异常处理程序，不仅能节省代码，而且把“描述在正常执行剁成中做什么事”和“出了问题怎么办”的代码相分离。异常机制使代码的阅读、编写和调试工作更加井井有条。</p><p>​            基本异常</p><p>​            异常捕获</p><p>​            自定义异常</p><p>​            异常声明</p><p>​                    重新抛出异常</p><p>​                    异常链</p><p>​            Java标准异常</p><p>​            finally 用于把除内存之外的资源恢复到他们初始状态时。如果把finally子句和带标签的break及continue配合使用，在Java里就没必要使用goto语句了</p><p>​            异常丢失</p><p>​            异常限制</p><p>​            构造器和异常处理</p><p>​            Try-With-Resources和构造器异常处理</p><p>​            异常匹配</p><p>​            异常处理的一个重要原则是“只有在你知道如何处理的情况下才捕获异常”。异常处理的一个中哟啊目标就是把错误处理的代码同错误发生的地点相分离。</p><p>​            <strong>吞了异常</strong></p><p>​            被检查的异常与并发症</p><p>​                    所有模型都是错误的，但有些是            能用的。</p><p>​            反射和泛型就是用来补偿静态类型检查所带来的过多限制。</p><p>​            好的程序设计语言能帮助程序员写出好程序，但无论哪种语言都避免不了程序员用它写出坏程序。</p><p>​            把被检查的异常转换为不检查的异常</p><p>​                    异常链</p><p>​                    用RuntimeException来包装，被检查的异常</p><p>​            异常指南</p><p>​                    1.尽可能使用 try-with-resource。</p><p>​                    2.在恰当的级别处理问题。（在知道该如何处理的情况下才捕获异常。）</p><p>​                    3.解决问题并且重新调用产生异常的方法。</p><p>​                    4.进行少许修补，然后绕过异常发生的地方继续执行。</p><p>​                    5.用别的数据进行计算，以代替方法预计会返回的值。</p><p>​                    6.把当前运行环境下能做的事情尽量做完，然后把相同的异常重抛到更高层。</p><p>​                    7.把当前运行环境下能做的事情尽量做完，然后把不同的异常抛到更高层。</p><p>​                    8.终止程序。</p><p>​                    9.进行简化。（如果你的异常模式使问题变得太复杂，那用起来会非常痛苦也很烦人。）</p><p>​                    10.让类库和程序更安全。（这既是在为调试做短期投资，也是在为程序的健壮性做长期投资。）</p><p>​            报告功能是异常的精髓所在</p><h2 id="代码校验"><a href="#代码校验" class="headerlink" title="代码校验"></a>代码校验</h2><p>让代码健壮的方法    </p><p>​        测试</p><p>​                单元测试</p><p>​        前置条件（契约式设计DBC）</p><p>​                断言</p><p>​                Java断言语法</p><p>​                Guava断言</p><p>​                检查指令</p><p>​        测试驱动开发（TDD）</p><p>​        日志</p><p>​        调试</p><p>​                JDB、图形化调试器</p><p>​        基准测试</p><p>​        剖析和优化</p><p>​                剖析和优化</p><p>​                优化准则</p><p>​                        避免为了性能牺牲代码的可读性。</p><p>​                        不要独立地看待性能。衡量与带来的收益相                比所需投入的工作量。</p><p>​                        程序的大小很重要。性能优化通常只对运行                了长时间的大型项目有价值。性能通常不是小项                目的关注点。</p><p>​                        运行起来程序比一心钻研它的性能具有更高                的优先级。一旦你已经有了可工作的程序，如有                必要的话，你可以使用剖析器提高它的效率。只                有当性能是关键因素时，才需要在设计/开发阶段                考虑性能。</p><p>​                        不要猜测瓶颈发生在哪。运行剖析器，让剖                析器告诉你。</p><p>​                        无论何时有可能的话，显式地设置实例为                 null 表明你不再用它。这对垃圾收集器来说是个                有用的暗示。</p><p>​                        <strong>static final</strong> 修饰的变量会被 JVM 优化从而                提高程序的运行速度。因而程序中的常量应该声                明 <strong>static final</strong>。</p><p>​        风格检测</p><p>​        静态错误分析</p><p>​        代码重审</p><p>​        结对编程</p><p>​        重构：</p><p>​                重构基石：</p><p>​                        测试</p><p>​                        自动构建</p><p>​                        版本控制</p><p>​        持续集成</p><p>​                持续集成服务器</p><p>​                持续集成需要分布式版本管理，自动构建和自动        测测试系统作为基础</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>​        流与文件结合使得文件操作编程变得更加优雅</p><p>​        文件和目录路径</p><p>​                选取部分路径片段</p><p>​                路径分析</p><p>​                        FIile工具类</p><p>​        文件系统</p><p>​        路径监听</p><p>​                文件删除和线程</p><p>​        文件查找</p><p>​        文件读写</p><p>​        </p><p>​        java.nio.file        </p><p>​        java.nio.file.Files</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>​        String类</p><p>​                stringbuilder</p><p>​        意外递归</p><p>​        格式化输出</p><p>​                Formatter类，java.util.Formatter</p><p>​        正则表达式，处理string的匹配、选择、编辑以及验证</p><h2 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h2><p>​        java如何在运行时识别对象和类信息：</p><p>​                “传统的”RTTI</p><p>​                “反射”机制</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>​            </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​            类层次结构</p><p>​            除了内存清理之外，所有的清理都不会自动发生</p><p>​        </p><p>​        </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构</title>
      <link href="/51507.html"/>
      <url>/51507.html</url>
      
        <content type="html"><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>​        问题类型：</p><p>​                修改栈</p><p>​                递归与栈</p><p>​                树</p><p>​                利用栈实现队列</p><p>​        解法类型：</p><p>​                单调栈</p><p>​                双指针</p><p>​                双栈</p><p>​                观察并推导出数学公式</p><p>​                语言自带工具类</p><p>​            </p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>​                滑动窗口</p><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><p>​            注意：Deque同时具有双端队列的性质</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>​            优先队列和堆</p><h2 id="优化算法的方法"><a href="#优化算法的方法" class="headerlink" title="优化算法的方法"></a>优化算法的方法</h2><p>​            二分法？？</p><p>​            </p><p>​                </p><p>​         </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>壁纸-无水印</title>
      <link href="/51748.html"/>
      <url>/51748.html</url>
      
        <content type="html"><![CDATA[<h2 id="从网站获取"><a href="#从网站获取" class="headerlink" title="从网站获取"></a>从网站获取</h2><p><a href="https://bing.ioliu.cn/" target="_blank" rel="noopener">历史必应</a></p><p><a href="http://lab.mkblog.cn/wallpaper/" target="_blank" rel="noopener">mkblog</a></p><p><a href="https://github.com/GallonHu/pic">github_GallonHu</a></p><h2 id="手动获取"><a href="#手动获取" class="headerlink" title="手动获取"></a>手动获取</h2><p>（1）打开必应官方网站</p><p>（2）鼠标右击图片，选择检查选项</p><p>（3） 找到Sources选项</p><p>（4）点击top栏目里最下方选项就能看到图片</p><p>（5）鼠标右击图片，选择保存</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo文章插图显示问题-个人测试有效</title>
      <link href="/7663.html"/>
      <url>/7663.html</url>
      
        <content type="html"><![CDATA[<h2 id="方法一-GitHub路径"><a href="#方法一-GitHub路径" class="headerlink" title="方法一 GitHub路径"></a>方法一 GitHub路径</h2><p>​    （1）在Hexo下的.config.yml中设置post_asset_folder选项为true</p><p>​    （2）在git bash命令窗口下 使用hexo n “你的待插入图片的新建文章名称” 来生成新的md文件，在这个新建文件的同级目录下，会产生同名的文件夹。</p><p>​    （3）需要在新建md文件插入图片时，先把图片复制到（2）中的同名文件夹中</p><p>​    （4）按照花括号中的格式来插入图片<code>！[图片描述](待插入图片github中的路径)</code>。若没有路径，可先在git bash 上使用hexo相关命令提交文章来产生。例如，我上传文章的图片的路径为{<code>！[JVM 虚拟机运行时数据区](/17374/JVM.png)</code>}，如下图：</p><p>​                        <img src="/7663/github_path.png" alt="图片在github中的路径"></p><p>​                        <img src="/7663/Hexo_pic.png" alt="图片的在代码中显示的路径"></p><p>​     实际上，图片通过这种方法能正常显示是因为，图片通过这种上传方式已经存在于github上，再通过这种引用图片的格式<code>！[图片描述](待插入图片github中的路径)</code>，来显示图片。</p><h2 id="方法二-图床"><a href="#方法二-图床" class="headerlink" title="方法二 图床"></a>方法二 图床</h2><p>​        使用图床获取url链接来显示图片</p><p>​        参考方法：<a href="https://www.dazhuanlan.com/2019/09/26/5d8cbd5d55654/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2019/09/26/5d8cbd5d55654/</a></p><p>​        </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/17374.html"/>
      <url>/17374.html</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解JAVA虚拟机-第三版"><a href="#深入理解JAVA虚拟机-第三版" class="headerlink" title="深入理解JAVA虚拟机 (第三版)"></a>深入理解JAVA虚拟机 (第三版)</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src="/17374/JVM.png" alt="JVM 虚拟机运行时数据区"></p><p>《深入理解JAVA虚拟》第三版主要围绕着上图来叙述，分为五大部分：</p><p>​        （1）JAVA发展历史：涉及JVM自诞生的版本到目前的版本的发展历程，其中，有讲述为何虚拟机会发生这样的演变，以及与其他类型虚拟机的的关系，并对虚拟机进行了展望。</p><p>​        （2）自动内存管理（运行时数据区）：涉及内存管理的异常，像内存溢出异常、OutOfMemory Error等，垃圾收集器，内存分配策略，故障处理方法与工具，调优方法。</p><p>​           (3）JVM执行子系统（执行）：类文件结构；JVM类加载的机制；字节码执行引擎；</p><p>​        （4）代码编译和优化；前端编译和优化（JAVA语法糖等）；后端编译与优化（即时编译、编译器优化技术-<strong>方法内联、逃逸分析</strong>等）</p><p>​        （5）高效并发：如何实现并发（JAVA内存模型）；如何高效实现并发（锁的介绍、<strong>锁优化</strong>-锁粗化、锁自旋、锁偏向等等）</p><p>若需要《深入理解JAVA虚拟机》第三版pdf，可发邮件至###qhuang724@gmail.com###（发送时去掉#）</p><p>​            </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Transfer Learning</title>
      <link href="/8787.html"/>
      <url>/8787.html</url>
      
        <content type="html"><![CDATA[<h1 id="跨领域情感分析"><a href="#跨领域情感分析" class="headerlink" title="跨领域情感分析"></a>跨领域情感分析</h1><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><pre><code>近几年的综述</code></pre><h2 id="相关研究者"><a href="#相关研究者" class="headerlink" title="相关研究者"></a>相关研究者</h2><h3 id="国内研究者"><a href="#国内研究者" class="headerlink" title="国内研究者"></a>国内研究者</h3><p><a href="https://www.zhihu.com/people/jindongwang/activities" target="_blank" rel="noopener">迁移学习手册——王晋东</a></p><h3 id="国外研究者"><a href="#国外研究者" class="headerlink" title="国外研究者"></a>国外研究者</h3>]]></content>
      
      
      <categories>
          
          <category> NLP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bugs</title>
      <link href="/30574.html"/>
      <url>/30574.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p><a href="https://chrischen0405.github.io/2018/11/21/post20181121-2/" target="_blank" rel="noopener">hexo发布文章报错can not read a block mapping entry</a></p><h1 id="bert"><a href="#bert" class="headerlink" title="bert"></a>bert</h1><p><a href="https://blog.csdn.net/yangdan1025/article/details/103293891" target="_blank" rel="noopener">Bert在Win10启动server TypeError: cannot unpack non-iterable NoneType object</a></p>]]></content>
      
      
      <categories>
          
          <category> Bugs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>algorithm per day</title>
      <link href="/29461.html"/>
      <url>/29461.html</url>
      
        <content type="html"><![CDATA[<h2 id="day-1"><a href="#day-1" class="headerlink" title="day 1"></a>day 1</h2><h3 id="two-sum"><a href="#two-sum" class="headerlink" title="two-sum"></a>two-sum</h3><pre><code>暴力解法：时间复杂度为O（n^2）运用HashMap：时间复杂度为O（1），相比较于暴力解法，在数据规模较大的时候，还是有时间上的优势的。关于containsKey()方法，根据某种哈希算法，直接定位所要的元素，也就是说，这个查找的方法的时间复杂度最好为O（1），若没有直接找到，存储方式变为红黑树，查询复杂度为O（lgn），而并非O（n^2）。</code></pre><p>参考：<a href="https://blog.csdn.net/qingtian_1993/article/details/80763381" target="_blank" rel="noopener">containsKey()方法的复杂度为何为O（1）</a></p><h3 id="mini-parser"><a href="#mini-parser" class="headerlink" title="mini-parser"></a>mini-parser</h3><pre><code>相似题目 flatten-nested-list-iterator</code></pre><h2 id="day-2"><a href="#day-2" class="headerlink" title="day 2"></a>day 2</h2><h3 id="next-greater-element-ii"><a href="#next-greater-element-ii" class="headerlink" title="next-greater-element-ii"></a>next-greater-element-ii</h3><pre><code>    暴力解法；    运用栈；        在解决循环列表的时候，可以用循环链表、列表中每个数重复两次（可能会有取余操作）、可以用三个for循环（暴力解法）。        题目中使用栈作为相邻有先后顺寻的元素的存储介质，利用栈的特性，方便得到结果，时间复杂度为O(1),空间复杂度为O（1）。</code></pre><h3 id="biao-qian-yan-zheng-qi-by-leetcode"><a href="#biao-qian-yan-zheng-qi-by-leetcode" class="headerlink" title="biao-qian-yan-zheng-qi-by-leetcode"></a>biao-qian-yan-zheng-qi-by-leetcode</h3><pre><code>    这个题目先放放。</code></pre><h3 id="exclusive-time-of-functions"><a href="#exclusive-time-of-functions" class="headerlink" title="exclusive-time-of-functions"></a>exclusive-time-of-functions</h3><pre><code>    利用栈来做，类似于中缀表达式求值</code></pre><h3 id="baseball-game"><a href="#baseball-game" class="headerlink" title="baseball-game"></a>baseball-game</h3><pre><code>    利用栈的先进后出的特点来操作数据，类似于中缀表达式求值</code></pre><h2 id="day-3"><a href="#day-3" class="headerlink" title="day 3"></a>day 3</h2><h3 id="number-of-atoms"><a href="#number-of-atoms" class="headerlink" title="number-of-atoms"></a>number-of-atoms</h3><pre><code>    利用栈和map来解析化学表达式，其中得注意字符和数字处理的API，使用java.util.*来处理排序（Arrays）</code></pre><h2 id="day-4"><a href="#day-4" class="headerlink" title="day 4"></a>day 4</h2><h3 id="asteroid-collision"><a href="#asteroid-collision" class="headerlink" title="asteroid-collision"></a>asteroid-collision</h3><pre><code>    利用一个栈来的特点来操作数据，而不是用两个栈</code></pre><h3 id="dailyTemperatures"><a href="#dailyTemperatures" class="headerlink" title="dailyTemperatures"></a>dailyTemperatures</h3><pre><code>    利用栈的特点来操作数据，比暴力解法要快得多</code></pre><h2 id="day-5"><a href="#day-5" class="headerlink" title="day 5"></a>day 5</h2><h3 id="backspace-string-compare"><a href="#backspace-string-compare" class="headerlink" title="backspace-string-compare"></a>backspace-string-compare</h3><pre><code> 利用栈的特点来操作数据</code></pre><h3 id="score-of-parentheses"><a href="#score-of-parentheses" class="headerlink" title="score-of-parentheses"></a>score-of-parentheses</h3><pre><code>    第一种比较容易想到的方法是利用栈来操作数据，类似于中缀表达式求值。（O(N),O(N)）    第二种方法：当仔细分析对结果有影响的因素时，会发现不同深度的()的得分会实质性地作用于最终的得分，其他的括号要么是累加，要么是将分数乘以2。进一步抽象，会发现2^x求和（x为()的深度）会是最终的结果（如果输入只有括号）。此时，并没有采用栈，而是发现了求最后结果的过程中，抽象出了数学表达式，利用数学表达式来求最后的结果。(O(N),O(1))    第三种方法：采用分治策略，组成最后的分的结果的要素分别相加求和。以平衡括号为字符串分解的点，若以左括号为1，右括号为-1，当遍历字符串时，S累加为0时，则说明有平衡括号()。(O(N^2),O(1))</code></pre><h3 id="decoded-string-at-index"><a href="#decoded-string-at-index" class="headerlink" title="decoded-string-at-index"></a>decoded-string-at-index</h3><pre><code>在影响最后结果的因素中，求出字符串结果不是必要的，反而，求出字符串变化后的size，能够实质性地助力求解最后地结果。另一方面，在字符串变化的过程中，仔细观察，会发现，当节码字符串长度为size的词重复多次时，索引K的结果与K/size的结果一致。正是这两个特点，就能够对暴力解法在时间复杂度或空间复杂度上作优化。这也是一例没有采用栈结构来求解的方法，直接运用求值过程中良好的特点来优化求值过程。（O(N),O(1)）</code></pre><h3 id="maximum-frequency-stack"><a href="#maximum-frequency-stack" class="headerlink" title="maximum-frequency-stack"></a>maximum-frequency-stack</h3><pre><code>官方代码其中一行：group.computeIfAbsent(f, z-&gt; new Stack()).push(x);(O(1),O(N))</code></pre><h3 id="online-stock-span"><a href="#online-stock-span" class="headerlink" title="online-stock-span"></a>online-stock-span</h3><pre><code>单调栈（栈中的数据非严格单调递减）求出小于或等于今天价格的最大连续日数等价于求出最近的一个大于今日价格的日子（O（N）,O(N)）</code></pre><h3 id="sum-of-subarray-minimums"><a href="#sum-of-subarray-minimums" class="headerlink" title="sum-of-subarray-minimums"></a>sum-of-subarray-minimums</h3><pre><code>    思路一：所有满足 `A[j]` 为最右且最小的元素的子序列个数 `#(j)`，那么结果就是 `sum #(j) * A[j]`.（O(N),O(N)）    [c++ 单调栈](https://leetcode-cn.com/problems/sum-of-subarray-minimums/solution/cdan-diao-zhan-by-qwqcxh/)    思路二：想法是每当我们增加 `j`，这些最小值可能会有关联，事实上，`min(A[i:j+1]) = min(A[i:j], A[j+1])`。采用栈的数据结构。（O(N),O(N)）    动态规划：    暴力解法：</code></pre><h3 id="odd-even-jump"><a href="#odd-even-jump" class="headerlink" title="odd-even-jump"></a>odd-even-jump</h3><h3 id="check-if-word-is-valid-after-substitutions"><a href="#check-if-word-is-valid-after-substitutions" class="headerlink" title="check-if-word-is-valid-after-substitutions"></a>check-if-word-is-valid-after-substitutions</h3><pre><code>class Solution {     public boolean isValid(String S) {         while(S.contains(&quot;abc&quot;)) {          S = S.replaceAll(&quot;abc&quot;,&quot;&quot;);          }     return S.equals(&quot;&quot;);     } }</code></pre><h3 id="next-greater-node-in-linked-list"><a href="#next-greater-node-in-linked-list" class="headerlink" title="next-greater-node-in-linked-list"></a>next-greater-node-in-linked-list</h3><pre><code>采用单调栈暴力解法[单调栈解法的其他题目](https://leetcode-cn.com/problems/next-greater-node-in-linked-list/solution/python-dan-diao-zhan-by-jackwener/)</code></pre><h2 id="day-6"><a href="#day-6" class="headerlink" title="day 6"></a>day 6</h2><h3 id="longest-well-performing-interval"><a href="#longest-well-performing-interval" class="headerlink" title="longest-well-performing-interval"></a>longest-well-performing-interval</h3><pre><code>这个题目等下做</code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github/gitee/gitlab+optimization</title>
      <link href="/65248.html"/>
      <url>/65248.html</url>
      
        <content type="html"><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><h3 id="Hexo-GitHub"><a href="#Hexo-GitHub" class="headerlink" title="Hexo+GitHub"></a>Hexo+GitHub</h3><p>1.<a href="https://juejin.im/post/5dd2e898e51d45400206a466" target="_blank" rel="noopener">juejin.im/post/5dd2e898e51d45400206a466</a><br>2.<a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">godweiyang.com/2018/04/13/hexo-blog/</a><br>3.<a href="https://blog.sky03.cn/posts/41882.html" target="_blank" rel="noopener">blog.sky03.cn/posts/41882.html</a><br>4.<a href="https://www.cnblogs.com/bndong/p/9947729.html" target="_blank" rel="noopener">www.cnblogs.com/bndong/p/9947729.html</a><br>hexo+gitlab、hexo+gitee类似</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>1.<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-15" target="_blank" rel="noopener">blog.sky03.cn/posts/42790.html#toc-heading-15</a><br>2.<a href="https://www.jianshu.com/p/a664545f155c" target="_blank" rel="noopener">jianshu.com/p/a664545f155c</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1.<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">hexo文档</a><br>2.<a href="https://markdown-zh.readthedocs.io/en/latest/" target="_blank" rel="noopener">MarkDown文档</a></p><h2 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h2><p><a href="https://blog.csdn.net/banjw_129/article/details/82261165" target="_blank" rel="noopener">hexo +gitee pages 样式无法加载</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tool</title>
      <link href="/61453.html"/>
      <url>/61453.html</url>
      
        <content type="html"><![CDATA[<h2 id="语言文档"><a href="#语言文档" class="headerlink" title="语言文档"></a>语言文档</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.zealdocs.org" target="_blank" rel="noopener">Zeal</a> ：脱机文档       浏览器，包含196中语言API文档，支持Windows、Linux和macOS<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://zealusercontributions.now.sh/" target="_blank" rel="noopener">Zeal-docsets-xml</a> ：zeal 的docsets，采用xml引入<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.kapeli.com" target="_blank" rel="noopener">Dash</a>：适用于Mac OS平台的软件编程文档管理工具，可以浏览API文档，以及管理代码片段工具…<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.devdocs.com" target="_blank" rel="noopener">DevDocs</a>：    在快速，有条理和可搜索的界面中结合许多个API文档，可以在移动设备上离线运行<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://en.cppreference.com/w" target="_blank" rel="noopener">C/C++</a>：C/C++ API文档<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://docs.oracle.com/en/java" target="_blank" rel="noopener">Java</a>：Java API文档<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://lingcoder.github.io/OnJava8/#/" target="_blank" rel="noopener">On Java 8</a>：JAVA编程思想第五版（On Java 8）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://studygolang.com/pkgdoc" target="_blank" rel="noopener">Go</a>：Go API 文档<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://ww2.mathowrks.cn/help/matlab/index.html" target="_blank" rel="noopener">MATLAB</a>：MATLAB API 文档<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://developer.mozilla.org/en-US/docs/Web/HTML/Element" target="_blank" rel="noopener">HTML</a>：HTML API 文档<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://redisdoc.com" target="_blank" rel="noopener">Redis</a>：Redis API 文档</p><h2 id="在线平台"><a href="#在线平台" class="headerlink" title="在线平台"></a>在线平台</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://leetcode-cn.com/" target="_blank" rel="noopener">Leetcode</a>：算法练习等，编程能力提升的加油站<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.topcoder.com/" target="_blank" rel="noopener">Topcoder</a>：程序竞赛网站，适合一些高端的或者搞ACM的，也会举办一些比赛<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.lintcode.com/" target="_blank" rel="noopener">Leetcode</a>：中文版的leetcode，编程能力提升的加油站<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://acmclub.cn/" target="_blank" rel="noopener">NEUQ OJ</a>：在线的判题平台<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.nowcoder.com/contestRoom" target="_blank" rel="noopener">牛客网</a>：IT题库、牛客热评、面经、内推码等</p><h2 id="高校OJ"><a href="#高校OJ" class="headerlink" title="高校OJ"></a>高校OJ</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://poj.org/" target="_blank" rel="noopener">POJ</a>：北京大学程序在线评测系统</p><h2 id="站长工具"><a href="#站长工具" class="headerlink" title="站长工具"></a>站长工具</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://tool.chinaz.com/" target="_blank" rel="noopener">站长工具</a>：SEO工具,权重查询,收录查询,PR查询,ICP备案查询,whois查询,友情链接查询,反向链接查询,网站测试,IP查询,Alexa查询等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://linshiyouxiang.net/" target="_blank" rel="noopener">临时邮箱</a>：匿名注册不常用的网站/论坛，保护隐私免骚扰<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://sm.ms/" target="_blank" rel="noopener">SM.MS</a>：SM 免费图床，每个文件最大支持 5MB<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://namebeta.com/" target="_blank" rel="noopener">NnameBeta</a>：国际域名搜索、域名注册、国别域名注册、域名比价等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.domcomp.com/" target="_blank" rel="noopener">Domcomp</a>：域名比价<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://tool.lusongsong.com/seo/" target="_blank" rel="noopener">SEO 外链工具</a>：网站自动化宣传机器/免费的超级外链工具可批量增加外链</p><h2 id="工具集"><a href="#工具集" class="headerlink" title="工具集"></a>工具集</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://tool.lu/" target="_blank" rel="noopener">Coder 工具箱</a>：站长工具、代码格式化、压缩、加密、解密、下载链接转换等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://tool.oschina.net/" target="_blank" rel="noopener">在线工具 - OSCHINA.NET社区</a>：常用文档、常用对照表、代码处理、Html/Js/Css工具、加密/转码工具等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://tools.ly522.com/" target="_blank" rel="noopener">记磊工具箱</a>：Dns检测、CSS格式化、超级Ping、端口扫描等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://tool.mkblog.cn" target="_blank" rel="noopener">孟坤工具箱</a>：css一键美化、文本差异比较、代码高亮等<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.planetb.ca/syntax-highlight-word" target="_blank" rel="noopener">Syntax Highlight</a>：Syntax Highlight Code In Word Documents，在Word文档中插入漂亮的代码<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://qiao.github.io/PathFinding.js/visual/" target="_blank" rel="noopener">动画展示——路径搜索算法</a>：Syntax Highlight Code In Word Documents，动画展示各种路径搜索算法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://github.com/justjavac/free-programming-books-zh_CN">编程类中文书籍</a>：Syntax Highlight Code In Word Documents，免费计算机编程类中文书籍<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.easeus.com/" target="_blank" rel="noopener">磁盘分区软件</a>：EaseUS Partition Master——磁盘分区管理软件，不用重装系统，就可以重新划分磁盘空间</p><h2 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.pdfdo.com/" target="_blank" rel="noopener">文件转换器</a>：在线文件转换工具<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://convertio.co" target="_blank" rel="noopener">Convertio</a>：在线文件转换工具，支持超过309种不同的文档、图像、电子表格、电子书、文档、演示文稿、音频和视频格式<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://cn.office-converter.com" target="_blank" rel="noopener">Office-Converter</a>：免费在线转换视频，在线音频转换，在线图形转换，在线文档转换和在线压缩格式<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.uupoop.com" target="_blank" rel="noopener">PS</a>：在线PS</p><h2 id="设计素材"><a href="#设计素材" class="headerlink" title="设计素材"></a>设计素材</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">Iconfont</a>：阿里巴巴矢量图标库，有矢量图标下载、在线存储、格式转换等功能<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.flaticon.com/" target="_blank" rel="noopener">Flaticon</a>：海量扁平化免费的图标库<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://icons8.com/" target="_blank" rel="noopener">icons8</a>：独特系统平台风格、独特的web图标库以及音乐</p><h2 id="手机刷机"><a href="#手机刷机" class="headerlink" title="手机刷机"></a>手机刷机</h2><p>刷机工具：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;猎人大师（淘宝）；OPPO售后解锁恢复专用软件包；<br>网站：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="www.rom100.com">万维网</a><br>对于近1-2年的新机型，可能一般的解锁工具不太行，像解oppo reno 的屏幕锁，要么售后，要么邮寄找人解锁</p><h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;亿寻（湖南版；标准版），速度是杠杠的<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chrome插件+IDM，平时下载一些热门资源，速度和亿寻差不多，就是配置稍微有点麻烦<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://bbs.vipfenxiang.com/thread-52542-1-1.html" target="_blank" rel="noopener">vip分享网</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“淘一下”，基本6元左右一个月<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;收费软件：速盘（按流量收费）；新极品(6.5元/月合租百度网盘超级会员账号);</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>​        <a href="http://bbs.xiaobaipan.com/forum.php?mod=viewthread&tid=13576&extra=" target="_blank" rel="noopener">计算机书籍</a></p><p>​                </p><h2 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.liuyao-blog.cn" target="_blank" rel="noopener">liuyao</a>：Box中有许多个人手机的工具<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://godweiyang.com/" target="_blank" rel="noopener">WeiYang</a>：NLP、算法分享<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://flyrie.top/2018/10/20/Pip_No_Attribute_Main/" target="_blank" rel="noopener">田间小路</a>：ML、DL</p><h2 id="Software-PJ"><a href="#Software-PJ" class="headerlink" title="Software-PJ"></a>Software-PJ</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.chinapyg.com" target="_blank" rel="noopener">飘云阁</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://masuit.com/1230/history" target="_blank" rel="noopener">懒得勤快</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="https://www.gopojie.net/" target="_blank" rel="noopener">GoPoJie</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.haozi666.com/" target="_blank" rel="noopener">耗子修改</a><br>​        <a href="http://www.carrotchou.blog/" target="_blank" rel="noopener">胡萝卜周</a><br>​        <a href="https://www.ypojie.com/" target="_blank" rel="noopener">易破解</a><br>​        <a href="https://bbs.pediy.com/thread-13361.htm" target="_blank" rel="noopener">国外破解网站大全</a></p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/16107.html"/>
      <url>/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
